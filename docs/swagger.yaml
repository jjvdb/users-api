basePath: /users
definitions:
  models.BibleChapter:
    properties:
      abbreviation:
        type: string
      book:
        type: string
      book_id:
        type: integer
      chapter:
        type: integer
    type: object
  models.BookReadChaptersResponse:
    properties:
      abbreviation:
        type: string
      book:
        type: string
      book_id:
        type: integer
      read_chapters:
        items:
          type: integer
        type: array
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.GenericMessage:
    properties:
      message:
        type: string
    type: object
  models.LoginRequest:
    properties:
      device:
        type: string
      emailorusername:
        type: string
      location:
        type: string
      password:
        type: string
      remember:
        type: boolean
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.MarkBookReadResponse:
    properties:
      abbreviation:
        type: string
      book:
        type: string
      count:
        type: integer
      message:
        type: string
    type: object
  models.MarkChapterAsReadResponse:
    properties:
      abbreviation:
        type: string
      book:
        type: string
      chapter:
        type: integer
      message:
        type: string
    type: object
  models.ReadBook:
    properties:
      abbreviation:
        type: string
      book:
        type: string
      status:
        $ref: '#/definitions/models.StatusType'
    type: object
  models.StatusType:
    enum:
    - complete
    - partial
    - not_started
    type: string
    x-enum-varnames:
    - StatusComplete
    - StatusPartial
    - StatusNotStarted
host: api.scripture.pp.ua
info:
  contact: {}
  description: Fiber API with Swagger
  title: Scripture users-api
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user with email and password and returns a JWT
        access token and a refresh token.
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: Logs out the user from all devices by invalidating all refresh
        tokens associated with their account.
      parameters:
      - description: Refresh token
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Logout user from current device
      tags:
      - auth
  /logout/all:
    post:
      consumes:
      - application/json
      description: Logs out the user from all devices by invalidating all provided
        refresh tokens.
      parameters:
      - description: Bearer JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GenericMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout user from all devices
      tags:
      - auth
  /markbookasread/{bookid}:
    delete:
      consumes:
      - application/json
      description: Mark a book of the Bible as unread
      parameters:
      - description: ID of the book, can be the name of the book, abbreviation or
          the number (1-66)
        in: path
        name: bookid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MarkBookReadResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark a whole book unread
      tags:
      - read_history
    post:
      consumes:
      - application/json
      description: Mark a book of the Bible as read
      parameters:
      - description: ID of the book, can be the name of the book, abbreviation or
          the number (1-66)
        in: path
        name: bookid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MarkBookReadResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark a whole book read
      tags:
      - read_history
  /markchapterasread:
    delete:
      consumes:
      - application/json
      description: Mark a chapter from the Bible as unread
      parameters:
      - description: Bible chapter to mark as unread
        in: body
        name: chapter
        required: true
        schema:
          $ref: '#/definitions/models.BibleChapter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MarkChapterAsReadResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark a chapter as unread
      tags:
      - read_history
    post:
      consumes:
      - application/json
      description: Mark a chapter from the Bible as read
      parameters:
      - description: Bible chapter to mark as read
        in: body
        name: chapter
        required: true
        schema:
          $ref: '#/definitions/models.BibleChapter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MarkChapterAsReadResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark a chapter as read
      tags:
      - read_history
  /readbooksstatus:
    get:
      consumes:
      - application/json
      description: Returns the read status for each book in the Bible (complete, partial
        and not_started).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ReadBook'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get read progress of all Bible books
      tags:
      - read_history
  /readchaptersofbook/{bookid}:
    get:
      consumes:
      - application/json
      description: Returns the list of chapters marked as read for the specified book.
      parameters:
      - description: ID of the book, can be the name of the book, abbreviation or
          the number (1-66)
        in: path
        name: bookid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BookReadChaptersResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get read chapter numbers for a book
      tags:
      - read_history
  /refresh:
    post:
      consumes:
      - application/json
      description: Validates the refresh token and returns a new access and refresh
        token pair.
      parameters:
      - description: Refresh token
        in: header
        name: Refresh
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
